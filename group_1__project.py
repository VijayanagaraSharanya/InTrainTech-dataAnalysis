# -*- coding: utf-8 -*-
"""GROUP 1 _PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZiHk1thYQchEKMEx7yfm_zyXDPGjmnyZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import altair as alt
import scipy.stats as stats
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import missingno as msno
import dask.dataframe as dd
import geopandas as gpd
import statsmodels.api as sm
from wordcloud import WordCloud

df = pd.read_csv("/content/amazon_prime_titles.csv")
print(df.head())

df.info()

df.describe()

df.columns

data.describe().round(2)

data.duplicated().sum()

numeric_columns = data.select_dtypes(include=['number']).columns
# Fill NaN values with mean for numeric columns
data[numeric_columns] = data[numeric_columns].fillna(data[numeric_columns].mean())

data.isna().sum()

data['cast'].fillna("Unknown", inplace=True)

data['director'].fillna("Unknown", inplace=True)

data['date_added'].fillna("Unknown", inplace=True)

most_common_country = data['country'].mode()[0]
data['country'].fillna(most_common_country, inplace=True)

most_common_rating = data['rating'].mode()[0]
data['rating'].fillna(most_common_rating, inplace=True)

data_remove=['description']
data=data.drop(columns=data_remove)

data.isna().sum()

data.sample(10)

data['rating'].unique()

rating_counts = data['rating'].value_counts()
rating_counts

# Exclude rows where the director is "Unknown"
filtered_directors = data[data['director'] != 'Unknown']
top_directors = filtered_directors['director'].value_counts().head(10)
print("Top 10 Prolific Directors:")
print(top_directors)
# Exclude rows where the cast is "Unknown"
filtered_actors = data[data['cast'] != 'Unknown']
top_actors = filtered_actors['cast'].value_counts().head(10)
print("\nTop 10 Prolific Actors:")
print(top_actors)

"""# Data Cleaning
# Handling Missing Values
"""

#How Many Null values present in a column
print(df.isnull().sum())

#Duplicate values are present or not ,True indicates Duplicate values present, False Duplicates values not present
print(df.duplicated())

#Removing null values
df=df.dropna()
print(df.isnull().sum())

"""# Feature Engineering
# creating new features from existing

"""

df['date_added'] = pd.to_datetime(df['date_added'])
df['added_year'] = df['date_added'].dt.year
df['added_month'] = df['date_added'].dt.month
df['added_day'] = df['date_added'].dt.day
df.drop('date_added', axis=1, inplace=True)
print(df.head())

"""## Data transformation"""

#Since there is only One numerical column [release_year], sorting the whole dataset according to release_year

import pandas as pd
data=pd.read_csv("/content/amazon_prime_titles.csv")
print(data)
df = pd.DataFrame(data)

df_sorted = df.sort_values(by='release_year')
print(df_sorted)

# Creating a new file which have the sorted data
df_sorted.to_csv('sorted_data.csv', index=False)

import pandas as pd
from sklearn.preprocessing import RobustScaler

scaler = RobustScaler()
# Reshape the 'release_year' column to a 2D array for fitting the scaler
release_year_reshaped = df['release_year'].values.reshape(-1, 1)
df['release_year_scaled'] = scaler.fit_transform(release_year_reshaped)

print(df)

"""## Data Splitting"""

# Mainly data splitting is a crucial step in machine learning by using which
# we divide train data and test data.
# For our dataset, data splitting will not infer any meaning.

"""**EXPLORATORY DATA ANALYSIS**"""

df=pd.read_csv("/content/amazon_prime_titles.csv")
print(df)

plt.figure(figsize=(10, 6))
rating_counts.sort_index().plot(kind='bar', color='skyblue')
plt.title('Distribution of Age Ratings')
plt.xlabel('Age Rating')
plt.ylabel('Number of Movies')
plt.show()

# Distribution of movies by release year
plt.figure(figsize=(12, 6))
sns.histplot(data['release_year'], bins=30, kde=True, color='skyblue')
plt.title('Distribution of Movies by Release Year')
plt.xlabel('Release Year')
plt.ylabel('Number of Movies')
plt.show()

# Distribution of ratings
plt.figure(figsize=(10, 6))
sns.countplot(x='rating', data=data, order=data['rating'].value_counts().index, palette='viridis')
plt.title('Distribution of Ratings')
plt.xlabel('Rating')
plt.ylabel('Number of Movies')
plt.xticks(rotation=45, ha='right')
plt.show()

# Count the occurrences of each content type
content_type_counts = df['type'].value_counts()
# Create a bar plot
content_type_counts.plot(kind='bar', color='skyblue')
# Add labels and title
plt.xlabel('Content Types')
plt.ylabel('Count')
plt.title('Amazon Prime Video Content Types Distribution')
plt.show()

# Count the occurrences of each content type
content_type_counts = df['type'].value_counts()
# Create a bar plot
content_type_counts.plot(kind='bar', color='skyblue')
# Add labels and title
plt.xlabel('Content Types')
plt.ylabel('Count')
plt.title('Amazon Prime Video Content Types Distribution')
plt.show()

# Split the 'cast' column into individual actors
all_actors = df['cast'].str.split(', ', expand=True).stack()
# Count the occurrences of each actor
actor_counts = all_actors.value_counts().head(10)  # You can adjust the number of actors to display
# Create a bar plot
actor_counts.plot(kind='bar', color='skyblue')
# Add labels and title
plt.xlabel('Actor')
plt.ylabel('Number of Appearances')
plt.title('Top 10 Actors with Most Appearances on Amazon Prime Video')
plt.show()

# Count the occurrences of each release year
release_year_counts = df['release_year'].value_counts().sort_index()
# Create a line plot
release_year_counts.plot(kind='line', marker='o', color='orange')
# Add labels and title
plt.xlabel('Release Year')
plt.ylabel('Number of Titles')
plt.title('Release Year Trend on Amazon Prime Video')
plt.grid(True)
plt.show()

#Line Plot for Content Addition Over Time (Date_Added)
# Convert 'Date_Added' column to datetime
df['date_added'] = pd.to_datetime(df['date_added'])
# Group by 'date_added' and count the number of additions
content_addition_over_time = df.groupby('date_added').size()
# Plotting
plt.figure(figsize=(10, 6))
content_addition_over_time.plot()
plt.title('Content Addition Over Time')
plt.xlabel('date added')
plt.ylabel('Number of Additions')
plt.grid(True)
plt.show()

# 2. Stacked Bar Plot for Content Type and Rating (Type, Rating)
content_type_rating = df.groupby(['type', 'rating']).size().unstack()
content_type_rating.plot(kind='bar', stacked=True, figsize=(10, 6))
plt.title('Content Type and Rating')
plt.xlabel('type')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.legend(title='rating')
plt.show()

# 3. Box Plot for Release Year Distribution by Rating (Rating, Release_Year)
plt.figure(figsize=(10, 6))
sns.boxplot(x='rating', y='release_year', data=df)
plt.title('Release Year Distribution by Rating')
plt.xlabel('rating')
plt.ylabel('release year')
plt.show()

# 4. Heatmap for Duration vs. Release Year (Duration, Release_Year)
plt.figure(figsize=(10, 6))
heatmap_data = df.pivot_table(index='release_year', columns='duration', aggfunc='size', fill_value=0)
sns.heatmap(heatmap_data, cmap='viridis')
plt.title('duration vs. release year')
plt.xlabel('duration')
plt.ylabel('release Yyear')
plt.show()

## Violin Plot for Content Duration by Country (Country, Duration)
import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(15, 8))
sns.violinplot(x='country', y='duration', data=df)
plt.xticks(rotation=45)
plt.title('Violin Plot for Content Duration by Country')
plt.xlabel('Country')
plt.ylabel('Duration (min)')
plt.show()

## Stacked Bar Plot for Content Type by Rating (Type, Rating)
rating_order = ['TV-Y', 'TV-Y7', 'TV-Y7-FV', 'TV-G', 'TV-PG', 'TV-14', 'TV-MA', 'G', 'PG', 'PG-13', 'R', 'NC-17', 'UR']
plt.figure(figsize=(12, 8))
sns.countplot(x='rating', hue='type', data=df, order=rating_order, palette='viridis')
plt.title('Stacked Bar Plot for Content Type by Rating')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.legend(title='Type', loc='upper right')
plt.show()

## Line Plot for Cumulative Content Addition Over Time (Date_Added)
df['date_added'] = pd.to_datetime(df['date_added'])
df['cumulative_count'] = range(1, len(df) + 1)
plt.figure(figsize=(15, 8))
sns.lineplot(x='date_added', y='cumulative_count', data=df)
plt.title('Line Plot for Cumulative Content Addition Over Time')
plt.xlabel('Date Added')
plt.ylabel('Cumulative Count')
plt.xticks(rotation=45)
plt.show()

## Histogram for Release Year Distribution by Content Type (Release_Year, Type)
plt.figure(figsize=(12, 8))
sns.histplot(x='release_year', hue='type', data=df, multiple='stack', palette='tab10')
plt.title('Histogram for Release Year Distribution by Content Type')
plt.xlabel('Release Year')
plt.ylabel('Count')
plt.legend(title='Type', loc='upper left')
plt.show()

data = pd.read_csv('/content/amazon_prime_titles.csv')
column_to_plot = 'listed_in'
column_counts = data[column_to_plot].value_counts()
#Plot the Pie Chart
plt.figure(figsize=(8, 8))
plt.pie(column_counts, labels=column_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Pie Chart for {}'.format(column_to_plot))
plt.axis('equal')
plt.show()

grouped_df = df.groupby(['type', 'listed_in']).size().unstack(fill_value=0)
# Plotting
grouped_df.plot(kind='bar', stacked=True, figsize=(12,12))
plt.xlabel('Type')
plt.ylabel('director')
plt.title('Content Types by Genre')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Type')
plt.show()

#Stacked Bar Plot for Content Type by Director (Type, Director)
df = pd.DataFrame(data)
# Get the top N directors by title count
top_directors = df['director'].value_counts().nlargest(10).index
# Filter DataFrame to include only the top N directors
df_filtered = df[df['director'].isin(top_directors)]
# Group by 'type' and 'director' and count occurrences
grouped_df = df_filtered.groupby(['type', 'director']).size().unstack(fill_value=0)
# Plotting
fig, ax = plt.subplots()
grouped_df.plot(kind='bar', stacked=True, ax=ax)
plt.xlabel('Director')
plt.ylabel('Count')
plt.title('Stacked bar plot for Content Type and Director (Top 10)')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Content Type')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
column_to_plot = 'rating'
column_counts = data[column_to_plot].value_counts()
#Plot the Pie Chart
plt.figure(figsize=(8, 8))
plt.pie(column_counts, labels=column_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Pie Chart for {}'.format(column_to_plot))
plt.axis('equal')
plt.show()

# Trends or patterns in the addition of new content
date_added_trends = data.groupby('date_added')['show_id'].count()
plt.figure(figsize=(18, 6))
date_added_trends.plot(marker='o', linestyle='-', color='orange')
plt.title('Trends in the Addition of New Content')
plt.xlabel('Date Added')
plt.ylabel('Number of Movies Added')
plt.xticks(rotation=45, ha='right')
plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(x=top_directors.values, y=top_directors.index, palette='viridis')
plt.title('Top 10 Prolific Directors (Excluding Unknown)')
plt.xlabel('Number of Movies')
plt.ylabel('Director')
plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(x=top_actors.values, y=top_actors.index, palette='plasma')
plt.title('Top 10 Prolific Actors (Excluding Unknown)')
plt.xlabel('Number of Movies')
plt.ylabel('Actor')
plt.show()

# Top genres
top_genres = data['listed_in'].value_counts().head(10)
# Plot Top Genres
plt.figure(figsize=(12, 6))
sns.barplot(x=top_genres.values, y=top_genres.index, palette='muted')
plt.title('Top 10 Genres')
plt.xlabel('Number of Movies')
plt.ylabel('Genre')
plt.show()

# Plotting the distribution of movies and TV shows
plt.figure(figsize=(8, 6))
sns.countplot(x='type', data=data, palette='viridis')
plt.title('Distribution of Movies and TV Shows')
plt.xlabel('Type')
plt.ylabel('Number of Titles')
plt.show()

# Top N countries
top_countries = data['country'].value_counts().head(50).index
# Filter the data for the top countries
filtered_data = data[data['country'].isin(top_countries)]
# Visualize the total shows by country for the top countries
plt.figure(figsize=(22, 11))
sns.countplot(x='country', data=filtered_data, hue='type', order=top_countries, palette='viridis')
plt.title('Total Shows by Top Countries')
plt.xlabel('Country')
plt.ylabel('Number of Shows')
plt.legend(title='Type', loc='upper right')
plt.xticks(rotation=45, ha='right')
plt.show()

data_count1=data['rating'].value_counts().reset_index()
plt.figure(figsize=(16,6))
sns.countplot(x='rating',data=data,hue='type',order=data['rating'].value_counts().index)
plt.xticks(rotation=90)
plt.title('Distribution of show rating')
plt.xlabel('Rating')
plt.ylabel('Number of Shows')
plt.show()

